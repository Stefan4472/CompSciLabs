import java.util.Scanner;

/**
 * Your name: Stefan Kussmaul
 * Class block: H				Date: 11/10/15
 * Lab: 5
 * Title: Manipulating Arrays
 * Purpose: To gain proficiency implementing one-dimensional built-in arrays.
 */
public class ArrayUtil {

    private static final Scanner scanner = new Scanner(System.in);

    public static int[] initializeArray() {
        System.out.print("Enter Length of Array: ");
        int length = scanner.nextInt();
        int[] created = new int[length];
        for(int i = 0; i < length; i++) {
            System.out.print("Element [" + i + "] = ");
            created[i] = scanner.nextInt();
        }
        return created;
    }

    public static void display(int[] a) {
        System.out.println("size of array: " + a.length);
        printValues(a);
    }

    public static void printValues(int[] a) {
        System.out.print("array positions: ");
        for(int i = 0; i < a.length; i++) {
            System.out.printf("%3d", i);
            System.out.print("  ");
        }
        System.out.println();
        System.out.print("array entries:   ");
        for(int i = 0; i < a.length; i++) {
            System.out.printf("%3d", a[i]);
            System.out.print("  ");
        }
        System.out.println();
    }

    public static int indexOf(int a[], int value) {
        for(int i = 0; i < a.length; i++) {
            if(a[i] == value) {
                return i;
            }
        }
        return -1;
    }

    public static void smallestFirst(int a[]) {
        int smallest = a[0], index = 0;
        for(int i = 0; i < a.length; i++) {
            if(a[i] < smallest) {
                smallest = a[i];
                index = i;
            }
        }
        int copy = a[index];
        a[index] = a[0];
        a[0] = copy;
    }

    public static void rotate(int[] a, int steps) {
        int shift = Math.abs(steps) % a.length;
        int direction = (steps > 0) ? 1 : -1;
        if(shift != 0) {
            for (int i = 0; i < shift; i++) { // shift one element each iteration
                int j, copy, prev_element = a[0];
                for(j = 1; j <= a.length; j++) {
                    copy = a[(a.length + direction * j) % a.length];
                    a[(a.length + direction * j) % a.length] = prev_element;
                    prev_element = copy;
                }
            }
        }
    }

    public static int[] removeValue(int[] a, int value) {
        int num_elements = 0;
        for(int i = 0; i < a.length; i++) {
            if(a[i] == value) {
                num_elements++;
            }
        }
        int[] result = new int[a.length - num_elements];
        int index = 0;
        for(int i = 0; i < a.length; i++) {
            if(a[i] != value) {
                result[index] = a[i];
                index++;
            }
        }
        return result;
    }
}
