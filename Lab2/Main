import java.util.InputMismatchException;
import java.util.Scanner;

/**
 * Created by lhscompsci on 9/29/15.
 */
public class Main {

    private final static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        System.out.println("Welcome to Middle Earth!\n");
        for(int i = 0; i < 10; i++) {
            System.out.print("Enter race: ");
            int base = getBase(scanner.next());
            System.out.print("Enter number: ");
            String num1 = scanner.next();
            System.out.print("Enter number 2: ");
            String num2 = scanner.next();
            System.out.print("Enter operation: ");
            String operation = scanner.next();
            int result = calculate(BaseUtil.toBase10(num1, base),
                    BaseUtil.toBase10(num2, base), operation);
            String result_output = BaseUtil.fromBase10(result, base);

            System.out.println(
                rightJustify(num1, result_output.length()) + "\n" +
                operation + rightJustify(num2, result_output.length() - 1) + "\n" +
                generateLine(result_output.length()) + "\n" +
                result_output + "\n"
            );
        }
    }

    // returns base given race
    private static int getBase(String race) throws InputMismatchException {
        switch(race) {
            case "human":
            case "Human":
                return 10;
            case "elf":
            case "Elf":
                return 8;
            case "dwarf":
            case "Dwarf":
                return 5;
            case "wizard":
            case "Wizard":
                return 2;
            default:
                throw new InputMismatchException("Unsupported Race (" + race + ")");
        }
    }

    // takes two base ten numbers and operation
    private static int calculate(int num1, int num2,
                String operation) throws InputMismatchException {
        switch(operation) {
            case "*":
                return num1 * num2;
            case "+":
                return num1 + num2;
            case "/":
                return num1 / num2;
            case "-":
                return num1 - num2;
            case "^":
                return (int) BaseUtil.pow(num1, num2);
            default:
                throw new InputMismatchException("Unsupported Operation (" + operation + ")");
        }
    }

    // generates a String of specified length containing
    // repeating equal signs
    private static String generateLine(int length) {
        String result = "";
        for(int i = 0; i < length; i++) {
            result += "=";
        }
        return result;
    }

    // generates and returns a String of specified length
    // with String right justified
    private static String rightJustify(String s, int columnWidth) {
        String result = "";
        for(int i = 0; i < columnWidth - s.length(); i++) {
            result += " ";
        }
        return result + s;
    }
}
