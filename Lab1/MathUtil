/**
 * Your name: Stefan Kussmaul
 * Class block: H				Date: 9/24/15
 * Lab: 1
 * Title: Simple Algorithms
 * Purpose: A CLI-based program for executing various mathematical functions.
 */
public class MathUtil {

    /* The divides and countDigits methods were written first so that
    they could be used in other methods. */

    // returns whether dividend can be cleanly divided by divisor
    // i.e. without a decimal remainder
    public static boolean divides(int dividend, int divisor) {
        if(divisor == 0) {
            return false;
        }
        return ((double) dividend / divisor) % 1 == 0;
    }

    // prints all factors of given positive integer
    public static void printFactors(int num) {
        Main.startTime = System.currentTimeMillis();
        System.out.print("The factors of " + num + " are: ");
        for(int i = 0; i < num; i++) {
            if(divides(num, i)) {
                System.out.print(i + ", ");
            }
        }
        System.out.println(num + ".");
    }

    // returns greatest common divisor of a and b
    public static int GCD(int a, int b) {
        Main.startTime = System.currentTimeMillis();
        int smaller, larger, gcd = 1;
        if(a < b) { // todo: a == b?
            smaller = a;
            larger = b;
        } else {
            smaller = b;
            larger = a;
        }
        for(int i = 2; i <= smaller; i++) {
            if(divides(smaller, i) && divides(larger, i)) {
                gcd = i;
            }
        }
        return gcd;
    }

    // returns whether given integer is prime
    public static boolean prime(int num) {
        Main.startTime = System.currentTimeMillis();
        int sqr_root = squareRoot(num);
        for(int i = 2; i < sqr_root; i++) { // todo: squareroot function // todo: while loop, i x i <= num, exclude even numbers
            if(divides(num, i)) {
                return false;
            }
        }
        return true;
    }

    // returns squareroot of given int provided it is positive
    public static int squareRoot(int num) {
        if(num < 0) {
            return 0; // ignore
        } else {
            int i = 1;
            while(i * i <= num) {
                i++;
            }
            return i;
        }
    }

    // returns base raised to the power exponent
    public static double power(double base, int exponent) {
        Main.startTime = System.currentTimeMillis();
        double result = 1;
        for(int i = 0; i < abs(exponent); i++) {
            result *= base;
        }
        return exponent < 0 ? 1.0 / result : result;
    }

    // returns absolute value of number
    public static double abs(double num) {
        return num < 0 ? -num : num;
    }

    // returns int n-digits from right of given integer
    public static int findDigit(int num, int n) {
        Main.startTime = System.currentTimeMillis();
        int result = num % (int) power(10, n);
        for(int i = 0; i < n - 1; i++) {
            result /= 10;
        }
        return (int) abs(result);
    }

    public static void downDigits(int num) {
        Main.startTime = System.currentTimeMillis();
        System.out.println("The digits of " + num + " are:");
        for(int i = countDigits(num); i > 0; i--) {
            System.out.println(findDigit(num, i));
        }
    }

    // returns the number of digits in int
    public static int countDigits(double num) {
        Main.startTime = System.currentTimeMillis();
        int divided = (int) num / 10;
        int digits = 1;
        while(divided > 0) {
            divided /= 10;
            digits++;
        }
        return digits;
    }
}
