/**
 * Simple Algorithms Lab for AP Computer Science
 * Written by Stefan Kussmaul September 2015
 */
public class MathUtil {

    // returns whether dividend can be cleanly divided by divisor
    // i.e. without a decimal remainder
    public static boolean divides(int dividend, int divisor) {
        if(divisor == 0) {
            return false;
        }
        return (dividend / divisor) % 1 == 0;
    }

    // prints all factors of given positive integer
    public static void printFactors(int num) {
        if(num < 1) {
            System.out.println("Error: Cannot factor. Input must be an integer greater than zero");
        } else {
            System.out.print("The factors of " + num + " are: ");
            for(int i = 0; i < num; i++) {
                if(divides(num, i)) {
                    System.out.print(i + ", ");
                }
            }
            System.out.println(num + ".");
        }
    }

    // returns greatest common divisor of a and b
    public static int GCD(int a, int b) {
        if(a < 0 || b < 0) {
            System.out.println("Error: GCD requires positive parameters");
            return 0;
        } else {
            int smaller, larger, gcd = 1;
            if(a < b) { // todo: a == b?
                smaller = a;
                larger = b;
            } else {
                smaller = b;
                larger = a;
            }
            for(int i = 2; i <= smaller; i++) {
                if(divides(smaller, i) && divides(larger, i)) {
                    gcd = i;
                }
            }
            return gcd;
        }
    }

    // returns whether given integer is prime
    public static boolean prime(int num) {
        if(num == 0) {
            return false;
        } else {
            if(num < 0) {
                num *= -1;
            }
            for(int i = 2; i < squareRoot(num); i++) { // todo: squareroot function
                if(divides(num, i)) {
                    return false;
                }
            }
            return true;
        }
    }

    // returns squareroot of given int provided it is positive
    public static int squareRoot(int num) {
        if(num < 0) {
            return 0; // ignore
        } else {
            int i = 1;
            while(i * i <= num) {
                i++;
            }
            return i;
        }
    }

    // returns base raised to the power exponent
    public static double power(double base, int exponent) {
        double multiplier = base;
        if(exponent == 0) {
            return 1;
        } else if(exponent < 0) {
            multiplier = 1 / multiplier;
        }
        double result = base;
        for(int i = 0; i < exponent; i++) {
            result *= base;
        }
        return result;
    }

    // returns int n-digits from right of given integer
    public static int findDigit(int num, int n) {
        int result = num % (int) power(10, n);
        for(int i = 0; i < n - 1; i++) {
            result /= 10;
        }
        return result;
    }

    public static void downDigits(int num) {
        if(num < 0) {
            num *= -1;
        }
        for(int i = countDigits(num); i > 0; i--) {
            System.out.println(findDigit(num, i));
        }
    }

    // returns the number of digits in int
    public static int countDigits(int num) {
        num /= 10;
        int digits = 1;
        while(num > 0) { // todo: will in be 0?
            num /= 10;
            digits++;
        }
        return digits;
    }
}
