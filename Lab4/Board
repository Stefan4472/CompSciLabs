import java.util.Random;

/**
 * Created by lhscompsci on 10/15/15.
 */
public class Board {

    private int BOARD_SIZE = 10;
    private int NUM_MIRRORS = 10;

    private int[][] board;

    private int guesses = 0;
    private int correctGuesses = 0;
    private int shots = 0;

    // directions
    private static final int UP = -1;
    private static final int DOWN = 1;
    private static final int LEFT = -1;
    private static final int RIGHT = 1;

    // tile ID's
    private static final int EMPTY = 0; // no mirror
    private static final int L_MIRROR = 1; // mirror facing left, not revealed
    private static final int L_MIRROR_R = 2; // mirror facing left, revealed
    private static final int R_MIRROR = 3; // mirror facing right, not revealed
    private static final int R_MIRROR_R = 4; // mirror facing right, revealed

    private static final Random random = new Random();

    public int getGuesses() { return guesses; }
    public int getCorrectGuesses() { return correctGuesses; }
    public int getShots() { return shots; }
    public Board() {
        initBoard();
    }

    private void initBoard() {
        board = new int[BOARD_SIZE][BOARD_SIZE];
        int placed_mirrors = 0;
        do {
            int row = random.nextInt(board.length);
            int col = random.nextInt(board[0].length);
            if (board[row][col] == EMPTY) {
                board[row][col] = (random.nextBoolean() ? L_MIRROR : R_MIRROR);
                placed_mirrors++;
            }
        } while (placed_mirrors < NUM_MIRRORS);
    }

    // converts tileID to char on display
    private static char getTile(int tileID) throws IndexOutOfBoundsException {
        switch (tileID) {
            /*case 0:
            case 1:
            case 3:
                return '.';
            case 2:
                return '/';
            case 4:
                return '\\';
            default:
                throw new IndexOutOfBoundsException("Invalid Tile ID");*/
            case EMPTY:
                return '.';
            case L_MIRROR:
            case L_MIRROR_R:
                return '/';
            case R_MIRROR:
            case R_MIRROR_R:
                return '\\';
            default:
                return 'X';
        }
    }

    // board coordinates to screen coordinates of laser
    private int boardToLaser(int row, int col) {
        System.out.println(row + "," + col);
        if (row == -1) { // top row;
            return 2 * BOARD_SIZE + col;
        } else if (row == BOARD_SIZE) { // bottom row
            return col;
        } else if (col == -1) { // left column
            return 2 * BOARD_SIZE - row - 1;
        } else if (col == BOARD_SIZE) { // right column
            return 3 * BOARD_SIZE + row;
        } else {
            return -1;
        }
    }

    // laser number to board coordinates and direction to fire laser
    private int[] laserToBoard(int laser) {
        if(laser < BOARD_SIZE) { // bottom row
            return new int[] { BOARD_SIZE , laser, UP, 0 };
        } else if(laser >= BOARD_SIZE && laser < BOARD_SIZE * 2) { // left column
            return new int[] { BOARD_SIZE - laser % BOARD_SIZE - 1, -1, 0, RIGHT };
        } else if(laser >= 2 * BOARD_SIZE && laser < BOARD_SIZE * 3) { // top row
            return new int[] { -1, laser % BOARD_SIZE, DOWN, 0 };
        } else if(laser >= 3 * BOARD_SIZE && laser < BOARD_SIZE * 4){ // right column
            return new int[] { laser % BOARD_SIZE, BOARD_SIZE, 0, LEFT };
        } else {
            return null;
        }
    }

    // takes guess for mirror location using on-screen coordinates
    // reveals mirror if guess is right
    public boolean guessMirror(int laser1, int laser2) {
        int[] board_1 = laserToBoard(laser1); // use x
        int[] board_2 = laserToBoard(laser2); // use y
        int row, col; // todo: fix
        if(board_1[0] == board_2[1]) {
            row = board_2[0];
            col = board_1[1];
        } else if(board_1[1] == board_2[0]) {
            row = board_1[0];
            col = board_2[1];
        } else {
            row = -1;
            col = -1;
        }
        guesses++;
        boolean correct = board[row][col] != EMPTY;
        if(correct) {
            correctGuesses++;
        }
        return correct;
    }

    public int fireLaser(int laser) {
        int[] info = laserToBoard(laser);
        shots++;
        return fireLaser(info[0], info[1], info[2], info[3]);
    }

    public int fireLaser(int row, int col, int dirR, int dirC) {
        row += dirR;
        col += dirC;
        if(row < 0 || row == BOARD_SIZE || col < 0 || col == BOARD_SIZE) {
            return boardToLaser(row, col);
        }
        if(board[row][col] == L_MIRROR || board[row][col] == L_MIRROR_R) { // left-facing mirror "/"
            if(dirC == RIGHT) {
                dirR = UP;
                dirC = 0;
            } else if(dirC == LEFT) {
                dirR = DOWN;
                dirC = 0;
            } else if(dirR == DOWN) {
                dirR = 0;
                dirC = LEFT;
            } else if(dirR == UP) {
                dirR = 0;
                dirC = RIGHT;
            }
        } else if(board[row][col] == R_MIRROR || board[row][col] == R_MIRROR_R) { // right-facing mirror "\"
            if(dirC == RIGHT) {
                dirR = DOWN;
                dirC = 0;
            } else if(dirC == LEFT) {
                dirR = UP;
                dirC = 0;
            } else if(dirR == UP) {
                dirR = 0;
                dirC = LEFT;
            } else if(dirR == DOWN) {
                dirR = 0;
                dirC = RIGHT;
            }
        }
        return fireLaser(row, col, dirR, dirC);
    }

    public void displayBoard() {
        System.out.println("   20212223242526272829   "); // todo: no hardcoding
        for(int i = 0; i < board.length; i++) {
            System.out.print((19 - i) + " ");
            for(int j = 0; j < board[0].length; j++) {
                System.out.print(getTile(board[i][j]) + " ");
            }
            System.out.println(30 + i);
        }
        System.out.println("   0 1 2 3 4 5 6 7 8 9   ");
    }
}
